
/* ************************************************************************** */ 
/*                           ORIGINAL COPYRIGHT TEXT                          */ 
/* ************************************************************************** */ 

/*
  This sketch reads the sensor and creates a color bar graph on a tiny TFT

  Designed specifically to work with the Adafruit AS7262 breakout and 160x18 tft
  ----> http://www.adafruit.com/products/3779
  ----> http://www.adafruit.com/product/3533
  
  These sensors use I2C to communicate. The device's I2C address is 0x49
  Adafruit invests time and resources providing this open source code,
  please support Adafruit andopen-source hardware by purchasing products
  from Adafruit!
  
  Written by Dean Miller for Adafruit Industries.
  BSD license, all text above must be included in any redistribution
  */

/* ************************************************************************** */ 
/*                             HARDWARE CONNECTIONS                           */ 
/* ************************************************************************** */ 

/*

              Arduino Nano        miniTFTWing
              ============        ===========
                   /
                   | D11 (MOSI) -----> MOSI
              SPI <  D13 (SCK)  -----> SCLK
                   |     D5     -----> CS
                   |     D6     -----> DC
                   \

                   /
                   |  A4 (SDA)  -----> SDA
              I2C  |  A5 (SCL)  -----> SCL
                   \

                   /
                   |   3.3V    <====> 3.3V 
              Pwr  |   GND     <====> GND
                   \

The built-in LED is attached to pin Arduino Nano D13. 
However, this pin is used to interface miniTCFWing via SPI
So, the built-in LED becomes unusable after miniTFTWing initialization

*/


/* ************************************************************************** */ 
/*                           INCLUDE HEADERS SECTION                          */
/* ************************************************************************** */ 

// Support for the Git version tags
#include "git-version.h"

// Adafruit Graphics libraries
#include <Adafruit_GFX.h>    		   // Core graphics library
#include <Adafruit_ST7735.h> 		   // Hardware-specific library
#include <Adafruit_miniTFTWing.h>  // Seesaw library for the miniTFT Wing display

/* ************************************************************************** */ 
/*                                DEFINEs SECTION                             */
/* ************************************************************************** */ 

#ifndef GIT_VERSION
#define GIT_VERSION "0.1.0" // For downloads without git
#endif


// ---------------------------------------------------------
// Define which Arduino nano pins will control the TFT Reset, 
// SPI Chip Select (CS) and SPI Data/Command DC
// ----------------------------------------------------------

#define TFT_RST -1  // miniTFTwing uses the seesaw chip for resetting to save a pin
#define TFT_CS   5 // Arduino Nano D5 pin
#define TFT_DC   6 // Arduini Nano D6 pin

// -----------------------------------------
// Some predefined colors for the 16 bit TFT
// -----------------------------------------

#define BLACK   0x0000
#define GRAY    0x8410
#define WHITE   0xFFFF
#define RED     0xF800
#define ORANGE  0xFA60
#define YELLOW  0xFFE0  
#define LIME    0x07FF
#define GREEN   0x07E0
#define CYAN    0x07FF
#define AQUA    0x04FF
#define BLUE    0x001F
#define MAGENTA 0xF81F
#define PINK    0xF8FF


// ---------------
// Other constants
// ---------------

// Short delay in screens (milliseconds)
#define SHORT_DELAY 200


// Events generated by user
enum gui_events {
  GUI_NO_EVENT      = 0,
  GUI_KEY_A_PRESSED,
  GUI_KEY_B_PRESSED,
  GUI_JOY_PRESSED,
  GUI_JOY_UP,
  GUI_JOY_DOWN,
  GUI_JOY_LEFT,
  GUI_JOY_RIGHT
};

/* ************************************************************************** */ 
/*                          GLOBAL VARIABLES SECTION                          */
/* ************************************************************************** */ 

// The Adafruit SeeSaw chip that controls the TFT by I2C
Adafruit_miniTFTWing ss;

// The Adafruit TFT display object based on ST7735
Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);


/* ************************************************************************** */ 
/*                            HELPER FUNCTIONS                                */
/* ************************************************************************** */ 

// A small helper
static void error(const __FlashStringHelper* err) 
{
  Serial.println(err);
  //delay(5000);
  //sleep_enable();
  //set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  //sleep_cpu();
  while(1) ;
}

/* ************************************************************************** */ 

// Reads miniTFTWing buttons & joystick and produces events
static uint8_t read_buttons()
{
  extern Adafruit_miniTFTWing ss;

  uint8_t event = GUI_NO_EVENT;

  // miniTFT wing buttons;
  uint32_t buttons;

  // read buttons via the I2C SeeSaw chip in miniTFTWing
  // These buttons are active-low logic
  buttons = ss.readButtons();


  if ((buttons & TFTWING_BUTTON_A) == 0) {
       //Serial.println("A pressed");
       event = GUI_KEY_A_PRESSED;
  } else if ((buttons & TFTWING_BUTTON_B) == 0) {
       //Serial.println("B pressed");
       event = GUI_KEY_B_PRESSED;
  } else if ((buttons & TFTWING_BUTTON_UP) == 0) {
       //Serial.println("Joy up");
       event = GUI_JOY_UP;
  } else if ((buttons & TFTWING_BUTTON_DOWN) == 0) {
       //Serial.println("Joy down");
       event = GUI_JOY_DOWN;
  } else if ((buttons & TFTWING_BUTTON_LEFT) == 0) {
       //Serial.println("Joy left");
       event = GUI_JOY_LEFT;
  } else if ((buttons & TFTWING_BUTTON_RIGHT) == 0) {
       //Serial.println("Joy right");
       event = GUI_JOY_RIGHT;
  } else if ((buttons & TFTWING_BUTTON_SELECT) == 0) {
       //Serial.println("Joy select");
       event = GUI_JOY_PRESSED;
  }
  return event;
}

/* ************************************************************************** */ 

/* ************************************************************************** */ 


static void display(String header, String line)
{

  tft.fillScreen(ST7735_BLACK);
  // Display the "Gain" sttring in TFT
  tft.setTextSize(3); // 3x the original font
  tft.setCursor(0, 0);
  tft.setTextColor(ST7735_WHITE, ST7735_BLACK);
  tft.print(header.c_str());
  // Display the gain value string in TFT
  tft.setCursor(tft.height()/3, tft.width()/3);
  tft.setTextColor(ST7735_YELLOW, ST7735_BLACK);
  tft.print(line.c_str());
  delay(SHORT_DELAY);
}


/* ************************************************************************** */ 
/*                              SETUP FUNCTIONS                              */
/* ************************************************************************** */ 

/* ************************************************************************** */ 

static void setup_tft()
{
  extern Adafruit_miniTFTWing ss;
  extern Adafruit_ST7735     tft;

  Serial.print(F("SeeSaw... "));
  // acknowledges the Seesaw chip before sending commands to the TFT display
  if (!ss.begin()) {
    error(F("seesaw couldn't be found!"));
  }

  Serial.print(F("ok"));
  Serial.print(F(", ver: "));
  Serial.println(ss.getVersion(), HEX); 
 
  ss.tftReset();   // reset the display via a seesaw command
  ss.setBacklight(TFTWING_BACKLIGHT_ON/2);  // turn on the backlight
  //ss.setBacklightFreq(10);  // turn on the backlight
  Serial.print(F("miniTFT... "));
  tft.initR(INITR_MINI160x80);   // initialize a ST7735S chip, mini display
  tft.setRotation(3);            
  tft.fillScreen(ST7735_BLACK);
  Serial.println(F("ok"));
}

/* ************************************************************************** */ 
/*                                MAIN SECTION                               */
/* ************************************************************************** */ 


void setup() 
{
  Serial.begin(115200);
  while(!Serial);
  Serial.println(F("Sketch version: " GIT_VERSION));
  setup_tft(); 
  display("Hello", "World");
}


void loop() 
{
  
  switch(read_buttons()) {

  case GUI_NO_EVENT  :
    break; /* optional */

  case GUI_KEY_A_PRESSED  :
    Serial.println(F("Key A pressed"));
    display("Key", "A");
    break; /* optional */
    
  case GUI_KEY_B_PRESSED  :
    Serial.println(F("Key B pressed"));
    display("Key", "B");
    break; /* optional */

  case GUI_JOY_UP  :
    Serial.println(F("Joystick up"));
    display("Joystick", "UP");
    break; /* optional */

  case GUI_JOY_DOWN  :
    Serial.println(F("Joystick down"));
    display("Joystick", "DOWN");
    break; /* optional */

  case GUI_JOY_LEFT  :
    Serial.println(F("Joystick left"));
    display("Joystick", "LEFT");
    break; /* optional */

  case GUI_JOY_RIGHT  :
    Serial.println(F("Joystick right"));
    display("Joystick", "RIGHT");
    break; /* optional */

  case GUI_JOY_PRESSED  :
    Serial.println(F("Joystick pressed"));
    display("Joystick", "BUTTON");
    break; /* optional */
  
   /* you can have any number of case statements */
   default : /* Optional */
    break;
  }
}
  

